V 14
3
LANG:10001 0 
LANG:10000 0 
LANG:10027 0 
PANEL,-1 -1 857 576 N "white" 0
"main()
{
  //basic scrolling properties
  warpAround = true; //when true -> wrap around from last to first
  bool visibleButtons = true; //when true -> control buttons visible

  //defines the grid size
  maxRow = 1;
  maxColumn = 9;

  //starting position
  currentRow = 1;
  currentPos = 1;

  //defines panels for the grid, keep in mind the grid size
  {
    panelsList[1][1] = \"examples/chartewo/subPanles/donut.pnl\";
    panelsList[1][2] = \"examples/chartewo/subPanles/radar.pnl\";
    panelsList[1][3] = \"examples/chartewo/subPanles/donutBars.pnl\";
    panelsList[1][4] = \"examples/chartewo/subPanles/bars.pnl\";
    panelsList[1][5] = \"examples/chartewo/subPanles/stackedBars.pnl\";
    panelsList[1][6] = \"examples/chartewo/subPanles/percentStackedBars.pnl\";
    panelsList[1][7] = \"examples/chartewo/subPanles/bubbles.pnl\";
    panelsList[1][8] = \"examples/chartewo/subPanles/heatmap.pnl\";
    panelsList[1][9] = \"examples/chartewo/subPanles/polar.pnl\";
  }

  //add global variables for fonts
  if ( !globalExists(\"g_chartTitleFont\") )
    addGlobal(\"g_chartTitleFont\", STRING_VAR);

  if ( !globalExists(\"g_chartLabelsFont\") )
    addGlobal(\"g_chartLabelsFont\", STRING_VAR);

  //define global chart fonts if needed
  g_chartTitleFont = \"Arial,-1,40,5,75,0,0,0,0,0,Bold\";
  g_chartLabelsFont = \"Arial,-1,30,5,50,0,0,0,0,0,Regular\";


  //the start panel
  string sStartPanel = panelsList[currentRow][currentPos];

  //go to fullscreen
  moduleShowFullScreen(myModuleName());

  //load panel
  RootPanelOnModule(sStartPanel, currentRow+\".\"+currentPos, \"module\", \"$pos:\"+currentRow+\":\"+currentPos);
  loadPanels(currentRow, currentPos);

  //makes control buttons visible if needed
  if ( visibleButtons )
  {
    right.visible(true);
    left.visible(true);
    demo.visible(true);
  }
}
" 0
 E E E E 1 -1 -1 0  0.9999999999998863 2
""0  1
E "int currentRow, currentPos;
int maxRow, maxColumn;
dyn_dyn_string panelsList;
bool warpAround = true;
bool demoState = false;

/*
  @authors Grygorii Sokhrannyi, Martin Koller
  Defines and loads panels for a given position (row and column numbers) and moving direction
  @params:
    - row is the row number in the panels grid
    - column is the column number in the panels grid
    - moveDir is the moving direction: 0 - Left, 1 - Right, 2 - Up, 3 - Below (the same way as position in the loadPanel() defined, see Help for loadPanel function)
*/
loadPanels(int row, int column, int moveDir = -1)
{
  //panels loading mechanism
  if ( column == maxColumn )   //if reached the last panel in the column, then load the first one for endless scrolling
    EMBEDDED_MODULE1.loadPanel(1, panelsList[row][1], (string)row + \".1\", \"$pos:\" + (string)row + \".1\");
  else if ( moveDir != 0 )
    EMBEDDED_MODULE1.loadPanel(1, panelsList[row][column + 1], (string)row + \".\" + (string)(column + 1), \"$pos:\" + (string)row + \".\" + (string)(column + 1));

  if ( column == 1 )   //if reached the first panel in the column, then load the last one for endless scrolling
    EMBEDDED_MODULE1.loadPanel(0, panelsList[row][maxColumn], (string)row + \".\" + (string)(maxColumn), \"$pos:\" + (string)row + \".\" + (string)(maxColumn));
  else if ( moveDir != 1 )
    EMBEDDED_MODULE1.loadPanel(0, panelsList[row][column - 1], (string)row + \".\" + (string)(column - 1), \"$pos:\" + (string)row + \".\" + (string)(column - 1));
}

/*
  @author Grygorii Sokhrannyi
  Function which starts infinite scrolling to the right
*/
synchronized void startDemo()
{
  while ( demoState )
  {
    delay(6);

    if ( !demoState )
      return;

    EMBEDDED_MODULE1.scrollToPanel(1);
  }
}
" 0
 4
"CBRef" "1"
"EClose" "main()
{
  if ( globalExists(\"g_chartTitleFont\") )
    removeGlobal(\"g_chartTitleFont\");

  if ( globalExists(\"g_chartLabelsFont\") )
    removeGlobal(\"g_chartLabelsFont\");

  PanelOff();
}" 0

"dpi" "96"
"pdpi" "96"
3 0 1 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
0
29 1
"EMBEDDED_MODULE1"
""
1 29.97622027534408 9 E E E 1 E 1 E N "_3DText" E N "white" E E
 E E
0 0 0 0 0 0
E E E
0
3
LANG:10001 0 
LANG:10000 0 
LANG:10027 0 

15
"newPanelAnimDuration" "int 700"
"oldPanelAnimDuration" "int 700"
"newPanelAnimateOpacity" "bool FALSE"
"oldPanelAnimateOpacity" "bool FALSE"
"newPanelAnimateSize" "bool FALSE"
"oldPanelAnimateSize" "bool FALSE"
"newPanelAnimType" "enum 9"
"oldPanelAnimType" "enum 9"
"horizontalScrollBarPolicy" "enum 1"
"ModuleName" "string module"
"verticalScrollBarPolicy" "enum 1"
"oldPanelEasingCurve" "enum 0"
"sizePolicy" "Preferred Preferred"
"layoutAlignment" "AlignNone"
"gesture" "main(string type, mapping data)
{
  //make sure that run into here during scrolling
  if ( type != \"scrollToPanel\" )
    return;

  //remember old position
  int oldPos = currentPos;
  int oldRow = currentRow;

  if ( (data[\"targetPos\"] == 0) && (currentPos > 1) ) //scroll left
    --currentPos;
  else if ( (data[\"targetPos\"] == 1) && (currentPos < maxColumn) ) //scroll right
    ++currentPos;
  else if ( (data[\"targetPos\"] == 0) && (currentPos == 1) && warpAround ) //scroll left on the edge with endless looping enabled
    currentPos = maxColumn;
  else if ( (data[\"targetPos\"] == 1) && (currentPos == maxColumn) && warpAround ) //scroll right on the edge with endless looping enabled
    currentPos = 1;
  else
    return;

  //load new panels only when position is changed
  if ( (oldPos != currentPos) || (oldRow != currentRow) )
    loadPanels(currentRow, currentPos, data[\"targetPos\"]);
}
"
3
LANG:10001 48 MS Shell Dlg 2,-1,13,5,400,0,0,0,0,0,0,0,0,0,0,1
LANG:10000 35 MS Shell Dlg 2,-1,13,5,50,0,0,0,0,0
LANG:10027 35 MS Shell Dlg 2,-1,13,5,50,0,0,0,0,0
0  9 9 847 566
15 Canvas.Canvas.1
0
"main()
{
  setScaleStyle(SCALE_NONE);
}" 0
13 8
"left"
""
1 11 25 E E E 1 E 0 E N "_ButtonText" E N "_Button" E E
 E E
7 0 0 0 37 0
E E E
8
3
LANG:10001 0 
LANG:10000 0 
LANG:10027 0 

1
"layoutAlignment" "AlignNone"
3
LANG:10001 39 Arial,-1,16,5,400,0,0,0,0,0,0,0,0,0,0,1
LANG:10000 26 Arial,-1,16,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,16,5,50,0,0,0,0,0
0  9 11 53 55

P 
4294967295
"pictures/jumpLeft.png"
3
LANG:10001 12 PUSH_BUTTON1
LANG:10000 1 <
LANG:10027 12 PUSH_BUTTON1
"main(mapping event)
{
  if ( warpAround || (currentPos > 1) )
    EMBEDDED_MODULE1.scrollToPanel(0);
}
" 0
 E E E
13 7
"right"
""
1 93 25 E E E 1 E 0 E N "_ButtonText" E N "_Button" E E
 E E
6 0 0 0 39 0
E E E
8
3
LANG:10001 0 
LANG:10000 0 
LANG:10027 0 

1
"layoutAlignment" "AlignNone"
3
LANG:10001 39 Arial,-1,16,5,400,0,0,0,0,0,0,0,0,0,0,1
LANG:10000 26 Arial,-1,16,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,16,5,50,0,0,0,0,0
0  91 11 135 55

P 
4294967295
"pictures/jumpRight.png"
3
LANG:10001 12 PUSH_BUTTON1
LANG:10000 1 >
LANG:10027 12 PUSH_BUTTON1
"main(mapping event)
{
  if ( warpAround || (currentPos < maxColumn) )
    EMBEDDED_MODULE1.scrollToPanel(1);
}
" 0
 E E E
13 10
"demo"
""
1 52 25 E E E 1 E 0 E N "_ButtonText" E N "_Button" E E
 E E
9 0 0 0 32 0
E E E
8
3
LANG:10001 18 Start demo regime.
LANG:10000 18 Start demo regime.
LANG:10027 18 Start demo regime.

2
"layoutAlignment" "AlignNone"
"isToggle" ""
3
LANG:10001 39 Arial,-1,16,5,400,0,0,0,0,0,0,0,0,0,0,1
LANG:10000 26 Arial,-1,16,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,16,5,50,0,0,0,0,0
0  50 11 94 55

P 
4294967295
"pictures/StandardIcons/arrow_single_right_32.png"
3
LANG:10001 12 PUSH_BUTTON1
LANG:10000 1 v
LANG:10027 12 PUSH_BUTTON1
"main(mapping event)
{
  demoState = this.toggleState();

  startDemo();
}
" 0
 E E E
0
LAYER, 1 
0
0
LAYER, 2 
0
0
LAYER, 3 
0
0
LAYER, 4 
0
0
LAYER, 5 
0
0
LAYER, 6 
0
0
LAYER, 7 
0
0
4 2 "LAYOUT_GROUP2" -1
1 0 
1 

"S 1" "0 0 1 1"
"" ""
0 3 0 0
0
